include:
  - project: 'shared/ci-utils'
    file: 'triply-etl.yml'

default: 
  tags: 
    - etl

workflow:
  name: $PIPELINE_NAME


stages:
  # 0: Only install, lint and build, gets triggered on push and merge-requests:
  - preflight
  # 1: Run all regular ETL's:
  - run-etls
  # 2: construct Knowledge graph and synchronise services for the KG:
  - create-knowledge-graph
  # 3: Run IP bases code (e.g. create a Search Graph):
  - informationproducts
  # 4: optional final stage (e.g. to synchronize services for SG)
  - finalize

image: node:20.9-bullseye-slim

### Stage 0: Only install, lint and build, gets triggered on push and merge-requests:
preflight:
  stage: preflight
  script:
    - !reference [.etl-template, install]
  rules:
    - !reference [.etl-template, rules-preflight]

### Stage 1: add ETLs
dataverse:
  stage: run-etls
  interruptible: true
  allow_failure: false
  artifacts:
    !reference [.etl-template, artifacts]
  rules:
    - if: $DATAVERSE == "TRUE"
    - if: $TASK == "run-etls"
    - if: $TASK == $CI_JOB_NAME
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - !reference [.etl-template, install]
    - !reference [.etl-template, run-etl]

### Stage 1: add ETL with name "cbs_papers_zotero_odissei"
cbs_papers_zotero_odissei:
  stage: run-etls
  interruptible: true
  allow_failure: false
  artifacts:
    !reference [.etl-template, artifacts]
  script:
    - !reference [.etl-template, install]
    - !reference [.etl-template, run-etl]
  rules:
    - !reference [.etl-template, rules]  

cbs_publications:
  stage: run-etls
  interruptible: true
  allow_failure: false
  artifacts:
    !reference [.etl-template, artifacts]
  script:
    - !reference [.etl-template, install]
    - !reference [.etl-template, run-etl]
  rules:
    - !reference [.etl-template, rules]

### Stage 1: add another ETL with name "cbs_projects"
cbs_projects:
  stage: run-etls
  interruptible: true
  allow_failure: false
  artifacts:
    !reference [.etl-template, artifacts]
  script:
    - !reference [.etl-template, install]
    - !reference [.etl-template, run-etl]
  rules:
    - !reference [.etl-template, rules]

### Stage 1: add another ETL with name "cbs_codelib"
cbs_codelib:
  stage: run-etls
  interruptible: true
  allow_failure: false
  artifacts:
    !reference [.etl-template, artifacts]
  script:
    - !reference [.etl-template, install]
    - !reference [.etl-template, run-etl]
  rules:
    - !reference [.etl-template, rules]

### Stage 1: add another ETL with name "liss_codelib"
liss_codelib:
  stage: run-etls
  interruptible: true
  allow_failure: false
  artifacts:
    !reference [.etl-template, artifacts]
  script:
    - !reference [.etl-template, install]
    - !reference [.etl-template, run-etl]
  rules:
    - !reference [.etl-template, rules]

### Example stage 2: create Knowledge Graph:
reuse_existing_graphs:
  stage: create-knowledge-graph
  interruptible: true
  script:
    - !reference [.etl-template, install]
    - !reference [.etl-template, run-etl]
  rules:
    # Make sure you remove this next line if you want to use this stage:
    - if: $TASK == $CI_JOB_NAME
    - if: $CI_PIPELINE_SOURCE == "schedule"

### Example stage 3: informationproduct Search Graph:
schemaFix:
  stage: informationproducts
  interruptible: true
 # artifacts:
 #   !reference [.etl-template, artifacts]
  rules:
    # Make sure you remove this next line if you want to use this stage:
    - if: $TASK == "informationproducts"
    - if: $TASK == $CI_JOB_NAME
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - !reference [.etl-template, install]
    - !reference [.etl-template, run-etl]



### Example stage 4: synchronise servcices for Search Graph:
synchronize-services:
  stage: finalize
  interruptible: true
  artifacts:
    !reference [.etl-template, artifacts]
  rules:
    - if: $TASK == "finalize"
    - if: $TASK == $CI_JOB_NAME
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - !reference [.etl-template, install]
    - !reference [.etl-template, run-etl]
